package templates

import "github.com/pyxvlad/proiect-ipdp/database/types"

// Page represents the page template.
//
// NOTE: the header will overlap with the page's content
templ Page(title string, showIcon bool) {
	<!DOCTYPE html>
	<html>
		<head>
			<meta charset="UTF-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1"/>
			<link href="css/style.css" rel="stylesheet"/>
			<link href="css/checkbox.css" rel="stylesheet"/>
			<script src="https://unpkg.com/htmx.org@1.9.10" integrity="sha384-D1Kt99CQMDuVetoL1lrYwg5t+9QdHe7NLX/SoJYkXDFfX37iInKRy5xLSi8nO7UC" crossorigin="anonymous"></script>
			<title>{ title }</title>
		</head>
		<body class="ctp-mocha bg-ctp-base">
			// this will overlap with the page content
			<div class="ctp-mocha bg-ctp-base w-screen px-7 py-4 fixed flex flex-row justify-between">
				<p class="ctp-mocha text-ctp-text text-2xl">{ title }</p>
				if showIcon {
					<img class="w-[10%]" src="/assets/cat-svgrepo-com.svg" alt=""/>
				}
			</div>
			//
			//<div class="h-16"></div>
			<div class="text-ctp-text">
				{ children... }
			</div>
			<footer>
				<div class="h-0"></div>
			</footer>
		</body>
	</html>
}

templ PageWithoutOverlap(title string, showIcon bool) {
	@Page(title, showIcon) {
		<div class="h-[4.5rem]"></div>
		{ children... }
	}
}

templ HelloPage() {
	@Page("Hello Page", true) {
		<p class="ctp-mocha text-ctp-text">placeholder</p>
		<div class="min-h-96">
			for i :=0; i!= 100; i++ {
				<br/>
			}
		</div>
	}
}

templ SignUpPage() {
	@Page("Sign Up", false) {
		<div class="flex flex-col justify-center items-center h-screen">
			@SignUpForm("")
		</div>
	}
}

templ SignUpForm(warning string) {
	<form hx-post="/signup/attempt" hx-target="this" hx-swap="outerHTML">
		<div class="flex flex-col">
			<div class="flex flex-col justify-around h-32">
				<div class="flex justify-between items-center mx-6 space-x-2 form-group">
					<label>Email Address</label>
					<input class="bg-ctp-surface0 border-solid focus:border-2 focus:outline-none focus:ring-0 focus:border-ctp-sky p-[2px] focus:p-0 rounded-md" type="email" name="email" value=""/>
				</div>
				<div class="flex justify-between items-center mx-6 space-x-2 form-group">
					<label>Password</label>
					<input class="bg-ctp-surface0 border-solid focus:border-2 focus:outline-none focus:ring-0 focus:border-ctp-sky p-[2px] focus:p-0 rounded-md" type="password" name="password" value=""/>
				</div>
				<div class="flex justify-between items-center mx-6 space-x-2 form-group">
					<label>Confirm password</label>
					<input class="bg-ctp-surface0 border-solid focus:border-2 focus:outline-none focus:ring-0 focus:border-ctp-sky p-[2px] focus:p-0 rounded-md" type="password" name="confirm-password" value=""/>
				</div>
			</div>
			if warning != "" {
				<p class="text-ctp-red text-center">{ warning }</p>
			}
			<button class="btn px-4 py-2 my-2 font-semibold text-sm bg-ctp-surface0 hover:bg-sky-400 focus:bg-sky-400 rounded-full w-auto mx-auto" type="submit">Submit</button>
		</div>
	</form>
}

templ LogInPage() {
	@Page("Log In", false) {
		<div class="flex flex-col justify-center items-center h-screen">
			@LogInForm("")
		</div>
	}
}

templ LogInForm(warning string) {
	<form hx-post="/login/attempt" hx-target="this" hx-swap="outerHTML">
		<div class="flex flex-col">
			<div class="flex flex-col justify-around h-24">
				<div class="flex justify-between items-center mx-6 space-x-2 form-group">
					<label>Email Address</label>
					<input class="bg-ctp-surface0 border-solid focus:border-2 focus:outline-none focus:ring-0 focus:border-ctp-sky p-[2px] focus:p-0 rounded-md" type="email" name="email" value=""/>
				</div>
				<div class="flex justify-between items-center mx-6 space-x-2 form-group">
					<label>Password</label>
					<input class="bg-ctp-surface0 border-solid focus:border-2 focus:outline-none focus:ring-0 focus:border-ctp-sky p-[2px] focus:p-0 rounded-md" type="password" name="password" value=""/>
				</div>
			</div>
			if warning != "" {
				<p class="text-ctp-red text-center">{ warning }</p>
			}
			<button class="btn px-4 py-2 my-2 font-semibold text-sm bg-ctp-surface0 hover:bg-sky-400 focus:bg-sky-400 rounded-full w-auto mx-auto" type="submit">Submit</button>
		</div>
	</form>
}

css ButtonTextShadow() {
	text-shadow: ;
}

// calc(3.278688525% +1px);

css StatusSelector() {
	width: 57.291666667%;
	height: 1.75rem;
}

css ListWidth() {
	width: 57.291666667%;
}

script HideOnOutsideClick(id string) {
	const clickListener = event => {
		let target = event.target;
		let element = document.querySelectorAll('#'+id+'-list')[0];
		if(!element.contains(target)&&!element.classList.contains("hidden")){
			element.classList.toggle("hidden")
			document.removeEventListener('click', clickListener)
		}
	}
	document.addEventListener('click', clickListener)
}

script OnFocusForSuggestions(id string) {
	const toggles = () => {

	document.querySelectorAll('#'+id+'-container')[0].classList.toggle('relative')
	document.querySelectorAll('#'+id+'-input')[0].classList.toggle('rounded-md')
	document.querySelectorAll('#'+id+'-input')[0].classList.toggle('rounded-t-md')
	document.querySelectorAll('#'+id+'-list')[0].classList.toggle('hidden')
	document.querySelectorAll('#'+id+'-list')[0].classList.toggle('flex')
	document.querySelectorAll('#'+id+'-list')[0].classList.toggle('rounded-b-md')
	}
	const clickListener = event => {
		let target = event.target;
		let element = document.querySelectorAll('#'+id+'-container')[0];
		if(!element.contains(target)&&!element.classList.contains("hidden")){
			toggles()
			document.removeEventListener('click', clickListener)
		}
	}
	toggles()
	document.addEventListener('click', clickListener)
}

script SetSuggestion(id string, dbID uint, text string) {
	document.querySelectorAll('#'+id+'-input')[0].value=text;
	document.querySelectorAll('#'+id+'-id')[0].value=dbID;

	let numeric_container=htmx.find('#'+id+'-numeric-container');
	if(numeric_container){
		htmx.trigger(numeric_container, "input", {})
	}
}

templ InputWithSuggestions(id string, label string, placeholder string) {
	<label>{ label }</label>
	<div
		id={ id + "-container" }
		class={ "overflow-visible flex place-content-center",
				StatusSelector() }
	>
		<input
			id={ id + "-input" }
			hx-on:focus={ OnFocusForSuggestions(id) }
			hx-get={ "/suggestions/" + id }
			hx-trigger="input changed delay:1s, load"
			hx-target={ "#" + id + "-list" }
			hx-swap="innerHTML"
			class={ "bg-ctp-surface0 border-solid focus:border-2 focus:outline-none focus:ring-0 focus:border-ctp-sky p-[2px] focus:p-0 rounded-md w-full h-full", }
			type="text"
			name={ id }
			value=""
			placeholder={ placeholder + "..." }
			autocomplete="off"
		/>
		<input type="hidden" name={ id + "_id" } id={ id + "-id" }/>
		<div
			id={ id + "-list" }
			class={ "hidden absolute top-full bg-ctp-surface0 mx-auto max-h-32 w-full flex-col divide-y overflow-auto", }
		>
			@Suggestion(id, 0, "S-a stricat ceva")
		</div>
	</div>
}

script OnInput(id string) {
	let element=htmx.find("#"+id+"-numeric")
	if(htmx.find("#"+id+"-input").value != "") {
		htmx.removeClass(element,"hidden")
	}else{
		htmx.addClass(element, "hidden")
	}
}

templ WithNumericField(id string, required bool, placeholder string) {
	<div
		class="w-full flex flex-col place-content-center place-items-center space-y-2"
		hx-on:input={ OnInput(id) }
		id={ id + "-numeric-container" }
	>
		{ children... }
		<input
			id={ id + "-numeric" }
			name={ id + "-numeric" }
			type="text"
			inputmode="numeric"
			class={ "hidden bg-ctp-surface0 border-solid focus:border-2 focus:outline-none focus:ring-0 focus:border-ctp-sky p-[2px] focus:p-0 rounded-md",
		StatusSelector() }
			placeholder={ placeholder }
		/>
	</div>
}

templ Suggestion(id string, realId uint, name string) {
	<p hx-on:click={ SetSuggestion(id, realId, name) }>{ name }</p>
}

templ AddBookPage() {
	@PageWithoutOverlap("Add book", true) {
		<form
			enctype="multipart/form-data"
			method="post"
			class="mb-5"
			hx-on:load="htmx.find('form').reset()"
		>
			<div class="flex flex-col items-center space-y-2">
				<label>Preview</label>
				@BookCardPreview(BookCard{
					Title:    "",
					Author:   "",
					ImageURL: "",
					Status:   types.StatusToBeRead,
				})
				<label for="coverupload" class="bg-[#18181A] border-solid focus:border-2 focus:outline-none focus:ring-0 focus:border-ctp-sky p-[2px] focus:p-0 rounded-md w-1/3 text-center">Upload Cover</label>
				<input id="coverupload" hx-encoding="multipart/form-data" hx-post="/books/cards/preview" hx-target="#preview" hx-swap="outerHTML" class="hidden" type="file" name="cover" value="" placeholder="Book title..."/>
				<label>Title</label>
				<input
					autocomplete="off"
					hx-encoding="multipart/form-data"
					hx-post="/books/cards/preview"
					hx-trigger="input changed delay:1s"
					hx-target="#preview"
					hx-swap="outerHTML"
					class={ "bg-ctp-surface0 border-solid focus:border-2 focus:outline-none focus:ring-0 focus:border-ctp-sky p-[2px] focus:p-0 rounded-md",
				StatusSelector() }
					type="text"
					name="title"
					value=""
					placeholder="Book title..."
				/>
				<label>Author</label>
				<input
					autocomplete="off"
					hx-encoding="multipart/form-data"
					hx-post="/books/cards/preview"
					hx-trigger="input changed delay:1s"
					hx-target="#preview"
					hx-swap="outerHTML"
					class={ "bg-ctp-surface0 border-solid focus:border-2 focus:outline-none focus:ring-0 focus:border-ctp-sky p-[2px] focus:p-0 rounded-md",
				 StatusSelector() }
					type="text"
					name="author"
					value=""
					placeholder="Author's name..."
				/>
				@InputWithSuggestions("publisher", "Publisher", "Publisher's name")
				@WithNumericField("collection", false, "Number in collecion...") {
					@InputWithSuggestions("collection", "Collection", "Collection name")
				}
				@WithNumericField("series", true, "Volume in series...") {
					@InputWithSuggestions("series", "Series", "Series name")
				}
				<label>Status</label>
				<select
					hx-encoding="multipart/form-data"
					hx-post="/books/cards/preview"
					hx-trigger="input changed delay:1s"
					hx-target="#preview"
					hx-swap="outerHTML"
					name="status"
					id="status"
					autocomplete="off"
					class={ "bg-ctp-surface0 border-solid focus:border-2 focus:outline-none focus:ring-0 focus:border-ctp-sky p-[2px] focus:p-0 rounded-md", 
							StatusSelector() }
				>
					for _, status := range types.GetAllStatuses() {
						<option value={ status.String() }>{ status.String() }</option>
					}
				</select>
				<div class="flex flex-row-reverse place-content-center items-center">
					<label>Duplicate</label>
					<input
						hx-on:click="document.querySelectorAll('#duplicate-drawer')[0].classList.toggle('hidden')"
						type="checkbox"
						name="has-duplicate"
						id="has-duplicate"
						autocomplete="off"
					/>
				</div>
				<div class="hidden w-full flex flex-col place-content-center place-items-center space-y-2" id="duplicate-drawer">
					@InputWithSuggestions("duplicate", "Duplicate", "Duplicate book name")
				</div>
				<button
					class={ "bg-[#18181A] border-solid focus:bg-ctp-crust p-[2px] rounded-full w-1/4 h-[3.278688525%]", }
					type="submit"
				>
					Submit
				</button>
			</div>
		</form>
	}
}

templ BookCardPreview(card BookCard) {
	<div id="preview" class="flex flex-col justify-center items-center w-1/2">
		@bookCardWrapper(card)
	</div>
}

templ MenuItemsExtended(text string, iconUrl string, red bool) {
	<div class="flex flex-row items-center gap-x-2">
		<img class="size-6" src={ iconUrl } alt=""/>
		<p class={ templ.KV("text-ctp-red", red) }>{ text }</p>
	</div>
}

templ MenuItems(text string, iconUrl string) {
	@MenuItemsExtended(text, iconUrl, false)
}

templ Menu() {
	@PageWithoutOverlap("Menu", false) {
		<div class="flex flex-col justify-start ml-2 gap-y-3">
			<div class="flex flex-col justify-start ml-5 mb-4 text-xl gap-y-4">
				@MenuItems("Authors", "/assets/typewriter-svgrepo-com.svg")
				@MenuItems("Publishers", "/assets/stamp-svgrepo-com.svg")
				@MenuItems("Collections", "/assets/collections.svg")
				@MenuItems("Series", "/assets/series.svg")
			</div>
			<div class="flex place-items-center place-content-center mr-2 ml-0">
				<span class="bg-ctp-subtext0 w-11/12 h-px "></span>
			</div>
			<div class="flex flex-col justify-start mt-4 ml-5 text-xl gap-y-4">
				@MenuItems("Settings", "/assets/settings-svgrepo-com(1).svg")
				@MenuItems("Switch Account", "/assets/users-svgrepo-com.svg")
				@MenuItemsExtended("Log Out", "/assets/logout-2-svgrepo-com.svg", true)
			</div>
		</div>
	}
}
