package templates

import "fmt"
import "github.com/pyxvlad/proiect-ipdp/database/types"

type BookCard struct {
	Author   string
	Title    string
	ImageURL string
	Status   types.Status
}

templ bookCard(card BookCard) {
	<div
		class="flex flex-col-reverse bg-gradient-to-t from-black to-transparent p-2 rounded-xl grow max-h-[50%] opacity-100 hover:opacity-0"
	>
		<h2 class="mb-0.5 lg:mb-2 text-xs italic text-white">{ card.Author }</h2>
		<h3
			class={ templ.KV("line-clamp-2", strings.ContainsRune(card.Title, ' ')),
				templ.KV("truncate", !strings.ContainsRune(card.Title, ' ')),
				"text-pretty", "mb-0.5", "lg:mb-2", "text-xs", "font-bold", "text-white" }
		>
			{ card.Title }
		</h3>
	</div>
}

css backgroundImg(url string) {
	background-image: { templ.SafeCSSProperty(fmt.Sprintf("url('%s')",url)) };
}

css Button() {
	border-radius: 50%;
}

/*background-repeat: no-repeat;
  background-size: contain;
  background-position: center;
*/

templ bookCardWrapper(info BookCard) {
	<div
		class={
			"flex",
			"flex-col-reverse justify-between aspect-[10/16] w-11/12 rounded-xl shadow-black bg-zinc-900 m-auto",
			"bg-center",
			"bg-no-repeat",
			templ.KV(backgroundImg(info.ImageURL), info.ImageURL != ""),
			templ.KV("bg-cover", info.ImageURL != ""),
			templ.KV(backgroundImg("/assets/thenounproject-white.png"), info.ImageURL == ""),
			templ.KV("bg-contain", info.ImageURL == ""),
		}
	>
		@bookCard(info)
		<div
			class={
				// "flex flex-row-reverse size-3 rounded-full",
				"mr-3 mt-3 ml-auto rounded-full size-3",
				StatusToColor(info.Status),
			}
		></div>
	</div>
}

templ thebookGrid() {
	<div class="grid grid-cols-3 lg:grid-cols-6 gap-y-2 place-content-evenly">
		{ children... }
	</div>
}

templ AddBookButton() {
	<div class="text-3xl font-medium p-[12px] fixed bottom-4 right-2 size-16 flex flex-items-center justify-center place-content-center rounded-[50%] bg-indigo-700 ">
		<a href="/addbook">
			<img class="invert" src="/assets/plus-svgrepo-com.svg" alt=""/>
		</a>
	</div>
}

templ BookCardsPage(info []BookCard) {
	@PageWithoutOverlap("Library", true) {
		@thebookGrid() {
			for _, nfo := range info {
				@bookCardWrapper(nfo)
			}
		}
		@AddBookButton()
	}
}

func StatusToColor(status types.Status) string {
	switch status {
	case types.StatusToBeRead:
		return "bg-ctp-overlay0"
	case types.StatusInProgress:
		return "bg-ctp-green"
	case types.StatusRead:
		return "bg-ctp-sapphire"
	case types.StatusUncertain:
		return "bg-ctp-yellow"
	case types.StatusDropped:
		return "bg-ctp-red"
	default:
		panic("Couldn't assign color to status")
	}
}
